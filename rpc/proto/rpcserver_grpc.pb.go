// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: rpc/rpcserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScheduleService_AddProvider_FullMethodName     = "/rpc.ScheduleService/AddProvider"
	ScheduleService_SelectProvider_FullMethodName  = "/rpc.ScheduleService/SelectProvider"
	ScheduleService_SwitchProvider_FullMethodName  = "/rpc.ScheduleService/SwitchProvider"
	ScheduleService_GetFreeProvider_FullMethodName = "/rpc.ScheduleService/GetFreeProvider"
	ScheduleService_ShowProviders_FullMethodName   = "/rpc.ScheduleService/ShowProviders"
)

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleServiceClient interface {
	AddProvider(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*UUID, error)
	SelectProvider(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Provider, error)
	SwitchProvider(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Provider, error)
	GetFreeProvider(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Provider, error)
	ShowProviders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Providers, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) AddProvider(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, ScheduleService_AddProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) SelectProvider(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Provider, error) {
	out := new(Provider)
	err := c.cc.Invoke(ctx, ScheduleService_SelectProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) SwitchProvider(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Provider, error) {
	out := new(Provider)
	err := c.cc.Invoke(ctx, ScheduleService_SwitchProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetFreeProvider(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Provider, error) {
	out := new(Provider)
	err := c.cc.Invoke(ctx, ScheduleService_GetFreeProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ShowProviders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Providers, error) {
	out := new(Providers)
	err := c.cc.Invoke(ctx, ScheduleService_ShowProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations must embed UnimplementedScheduleServiceServer
// for forward compatibility
type ScheduleServiceServer interface {
	AddProvider(context.Context, *Provider) (*UUID, error)
	SelectProvider(context.Context, *UUID) (*Provider, error)
	SwitchProvider(context.Context, *UUID) (*Provider, error)
	GetFreeProvider(context.Context, *Empty) (*Provider, error)
	ShowProviders(context.Context, *Empty) (*Providers, error)
	mustEmbedUnimplementedScheduleServiceServer()
}

// UnimplementedScheduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleServiceServer struct {
}

func (UnimplementedScheduleServiceServer) AddProvider(context.Context, *Provider) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProvider not implemented")
}
func (UnimplementedScheduleServiceServer) SelectProvider(context.Context, *UUID) (*Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectProvider not implemented")
}
func (UnimplementedScheduleServiceServer) SwitchProvider(context.Context, *UUID) (*Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchProvider not implemented")
}
func (UnimplementedScheduleServiceServer) GetFreeProvider(context.Context, *Empty) (*Provider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreeProvider not implemented")
}
func (UnimplementedScheduleServiceServer) ShowProviders(context.Context, *Empty) (*Providers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowProviders not implemented")
}
func (UnimplementedScheduleServiceServer) mustEmbedUnimplementedScheduleServiceServer() {}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_AddProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).AddProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_AddProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).AddProvider(ctx, req.(*Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_SelectProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).SelectProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_SelectProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).SelectProvider(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_SwitchProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).SwitchProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_SwitchProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).SwitchProvider(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetFreeProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetFreeProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetFreeProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetFreeProvider(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ShowProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ShowProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_ShowProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ShowProviders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProvider",
			Handler:    _ScheduleService_AddProvider_Handler,
		},
		{
			MethodName: "SelectProvider",
			Handler:    _ScheduleService_SelectProvider_Handler,
		},
		{
			MethodName: "SwitchProvider",
			Handler:    _ScheduleService_SwitchProvider_Handler,
		},
		{
			MethodName: "GetFreeProvider",
			Handler:    _ScheduleService_GetFreeProvider_Handler,
		},
		{
			MethodName: "ShowProviders",
			Handler:    _ScheduleService_ShowProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpcserver.proto",
}

const (
	PlotService_Plot_FullMethodName = "/rpc.PlotService/Plot"
)

// PlotServiceClient is the client API for PlotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlotServiceClient interface {
	Plot(ctx context.Context, in *Task, opts ...grpc.CallOption) (PlotService_PlotClient, error)
}

type plotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlotServiceClient(cc grpc.ClientConnInterface) PlotServiceClient {
	return &plotServiceClient{cc}
}

func (c *plotServiceClient) Plot(ctx context.Context, in *Task, opts ...grpc.CallOption) (PlotService_PlotClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlotService_ServiceDesc.Streams[0], PlotService_Plot_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &plotServicePlotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlotService_PlotClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type plotServicePlotClient struct {
	grpc.ClientStream
}

func (x *plotServicePlotClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlotServiceServer is the server API for PlotService service.
// All implementations must embed UnimplementedPlotServiceServer
// for forward compatibility
type PlotServiceServer interface {
	Plot(*Task, PlotService_PlotServer) error
	mustEmbedUnimplementedPlotServiceServer()
}

// UnimplementedPlotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlotServiceServer struct {
}

func (UnimplementedPlotServiceServer) Plot(*Task, PlotService_PlotServer) error {
	return status.Errorf(codes.Unimplemented, "method Plot not implemented")
}
func (UnimplementedPlotServiceServer) mustEmbedUnimplementedPlotServiceServer() {}

// UnsafePlotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlotServiceServer will
// result in compilation errors.
type UnsafePlotServiceServer interface {
	mustEmbedUnimplementedPlotServiceServer()
}

func RegisterPlotServiceServer(s grpc.ServiceRegistrar, srv PlotServiceServer) {
	s.RegisterService(&PlotService_ServiceDesc, srv)
}

func _PlotService_Plot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Task)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlotServiceServer).Plot(m, &plotServicePlotServer{stream})
}

type PlotService_PlotServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type plotServicePlotServer struct {
	grpc.ServerStream
}

func (x *plotServicePlotServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PlotService_ServiceDesc is the grpc.ServiceDesc for PlotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PlotService",
	HandlerType: (*PlotServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Plot",
			Handler:       _PlotService_Plot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/rpcserver.proto",
}

const (
	NodeService_ShowTasks_FullMethodName = "/rpc.NodeService/showTasks"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	ShowTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) ShowTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, NodeService_ShowTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	ShowTasks(context.Context, *Empty) (*Tasks, error)
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) ShowTasks(context.Context, *Empty) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowTasks not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_ShowTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).ShowTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_ShowTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).ShowTasks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "showTasks",
			Handler:    _NodeService_ShowTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpcserver.proto",
}
