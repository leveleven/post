// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: rpc/rpcserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScheduleService_AddProvider_FullMethodName     = "/rpc.ScheduleService/addProvider"
	ScheduleService_SelectProvider_FullMethodName  = "/rpc.ScheduleService/selectProvider"
	ScheduleService_SwitchProvider_FullMethodName  = "/rpc.ScheduleService/switchProvider"
	ScheduleService_GetFreeProvider_FullMethodName = "/rpc.ScheduleService/getFreeProvider"
)

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleServiceClient interface {
	AddProvider(ctx context.Context, opts ...grpc.CallOption) (ScheduleService_AddProviderClient, error)
	SelectProvider(ctx context.Context, opts ...grpc.CallOption) (ScheduleService_SelectProviderClient, error)
	SwitchProvider(ctx context.Context, opts ...grpc.CallOption) (ScheduleService_SwitchProviderClient, error)
	GetFreeProvider(ctx context.Context, opts ...grpc.CallOption) (ScheduleService_GetFreeProviderClient, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) AddProvider(ctx context.Context, opts ...grpc.CallOption) (ScheduleService_AddProviderClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScheduleService_ServiceDesc.Streams[0], ScheduleService_AddProvider_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &scheduleServiceAddProviderClient{stream}
	return x, nil
}

type ScheduleService_AddProviderClient interface {
	Send(*Provider) error
	Recv() (*UUID, error)
	grpc.ClientStream
}

type scheduleServiceAddProviderClient struct {
	grpc.ClientStream
}

func (x *scheduleServiceAddProviderClient) Send(m *Provider) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scheduleServiceAddProviderClient) Recv() (*UUID, error) {
	m := new(UUID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scheduleServiceClient) SelectProvider(ctx context.Context, opts ...grpc.CallOption) (ScheduleService_SelectProviderClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScheduleService_ServiceDesc.Streams[1], ScheduleService_SelectProvider_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &scheduleServiceSelectProviderClient{stream}
	return x, nil
}

type ScheduleService_SelectProviderClient interface {
	Send(*UUID) error
	Recv() (*Provider, error)
	grpc.ClientStream
}

type scheduleServiceSelectProviderClient struct {
	grpc.ClientStream
}

func (x *scheduleServiceSelectProviderClient) Send(m *UUID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scheduleServiceSelectProviderClient) Recv() (*Provider, error) {
	m := new(Provider)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scheduleServiceClient) SwitchProvider(ctx context.Context, opts ...grpc.CallOption) (ScheduleService_SwitchProviderClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScheduleService_ServiceDesc.Streams[2], ScheduleService_SwitchProvider_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &scheduleServiceSwitchProviderClient{stream}
	return x, nil
}

type ScheduleService_SwitchProviderClient interface {
	Send(*UUID) error
	Recv() (*Provider, error)
	grpc.ClientStream
}

type scheduleServiceSwitchProviderClient struct {
	grpc.ClientStream
}

func (x *scheduleServiceSwitchProviderClient) Send(m *UUID) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scheduleServiceSwitchProviderClient) Recv() (*Provider, error) {
	m := new(Provider)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *scheduleServiceClient) GetFreeProvider(ctx context.Context, opts ...grpc.CallOption) (ScheduleService_GetFreeProviderClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScheduleService_ServiceDesc.Streams[3], ScheduleService_GetFreeProvider_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &scheduleServiceGetFreeProviderClient{stream}
	return x, nil
}

type ScheduleService_GetFreeProviderClient interface {
	Send(*Empty) error
	Recv() (*Provider, error)
	grpc.ClientStream
}

type scheduleServiceGetFreeProviderClient struct {
	grpc.ClientStream
}

func (x *scheduleServiceGetFreeProviderClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scheduleServiceGetFreeProviderClient) Recv() (*Provider, error) {
	m := new(Provider)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations must embed UnimplementedScheduleServiceServer
// for forward compatibility
type ScheduleServiceServer interface {
	AddProvider(ScheduleService_AddProviderServer) error
	SelectProvider(ScheduleService_SelectProviderServer) error
	SwitchProvider(ScheduleService_SwitchProviderServer) error
	GetFreeProvider(ScheduleService_GetFreeProviderServer) error
	mustEmbedUnimplementedScheduleServiceServer()
}

// UnimplementedScheduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleServiceServer struct {
}

func (UnimplementedScheduleServiceServer) AddProvider(ScheduleService_AddProviderServer) error {
	return status.Errorf(codes.Unimplemented, "method AddProvider not implemented")
}
func (UnimplementedScheduleServiceServer) SelectProvider(ScheduleService_SelectProviderServer) error {
	return status.Errorf(codes.Unimplemented, "method SelectProvider not implemented")
}
func (UnimplementedScheduleServiceServer) SwitchProvider(ScheduleService_SwitchProviderServer) error {
	return status.Errorf(codes.Unimplemented, "method SwitchProvider not implemented")
}
func (UnimplementedScheduleServiceServer) GetFreeProvider(ScheduleService_GetFreeProviderServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFreeProvider not implemented")
}
func (UnimplementedScheduleServiceServer) mustEmbedUnimplementedScheduleServiceServer() {}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_AddProvider_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScheduleServiceServer).AddProvider(&scheduleServiceAddProviderServer{stream})
}

type ScheduleService_AddProviderServer interface {
	Send(*UUID) error
	Recv() (*Provider, error)
	grpc.ServerStream
}

type scheduleServiceAddProviderServer struct {
	grpc.ServerStream
}

func (x *scheduleServiceAddProviderServer) Send(m *UUID) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scheduleServiceAddProviderServer) Recv() (*Provider, error) {
	m := new(Provider)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScheduleService_SelectProvider_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScheduleServiceServer).SelectProvider(&scheduleServiceSelectProviderServer{stream})
}

type ScheduleService_SelectProviderServer interface {
	Send(*Provider) error
	Recv() (*UUID, error)
	grpc.ServerStream
}

type scheduleServiceSelectProviderServer struct {
	grpc.ServerStream
}

func (x *scheduleServiceSelectProviderServer) Send(m *Provider) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scheduleServiceSelectProviderServer) Recv() (*UUID, error) {
	m := new(UUID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScheduleService_SwitchProvider_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScheduleServiceServer).SwitchProvider(&scheduleServiceSwitchProviderServer{stream})
}

type ScheduleService_SwitchProviderServer interface {
	Send(*Provider) error
	Recv() (*UUID, error)
	grpc.ServerStream
}

type scheduleServiceSwitchProviderServer struct {
	grpc.ServerStream
}

func (x *scheduleServiceSwitchProviderServer) Send(m *Provider) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scheduleServiceSwitchProviderServer) Recv() (*UUID, error) {
	m := new(UUID)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ScheduleService_GetFreeProvider_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScheduleServiceServer).GetFreeProvider(&scheduleServiceGetFreeProviderServer{stream})
}

type ScheduleService_GetFreeProviderServer interface {
	Send(*Provider) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type scheduleServiceGetFreeProviderServer struct {
	grpc.ServerStream
}

func (x *scheduleServiceGetFreeProviderServer) Send(m *Provider) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scheduleServiceGetFreeProviderServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "addProvider",
			Handler:       _ScheduleService_AddProvider_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "selectProvider",
			Handler:       _ScheduleService_SelectProvider_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "switchProvider",
			Handler:       _ScheduleService_SwitchProvider_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getFreeProvider",
			Handler:       _ScheduleService_GetFreeProvider_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/rpcserver.proto",
}

const (
	PlotService_Plot_FullMethodName = "/rpc.PlotService/Plot"
)

// PlotServiceClient is the client API for PlotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlotServiceClient interface {
	Plot(ctx context.Context, opts ...grpc.CallOption) (PlotService_PlotClient, error)
}

type plotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlotServiceClient(cc grpc.ClientConnInterface) PlotServiceClient {
	return &plotServiceClient{cc}
}

func (c *plotServiceClient) Plot(ctx context.Context, opts ...grpc.CallOption) (PlotService_PlotClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlotService_ServiceDesc.Streams[0], PlotService_Plot_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &plotServicePlotClient{stream}
	return x, nil
}

type PlotService_PlotClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type plotServicePlotClient struct {
	grpc.ClientStream
}

func (x *plotServicePlotClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *plotServicePlotClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlotServiceServer is the server API for PlotService service.
// All implementations must embed UnimplementedPlotServiceServer
// for forward compatibility
type PlotServiceServer interface {
	Plot(PlotService_PlotServer) error
	mustEmbedUnimplementedPlotServiceServer()
}

// UnimplementedPlotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlotServiceServer struct {
}

func (UnimplementedPlotServiceServer) Plot(PlotService_PlotServer) error {
	return status.Errorf(codes.Unimplemented, "method Plot not implemented")
}
func (UnimplementedPlotServiceServer) mustEmbedUnimplementedPlotServiceServer() {}

// UnsafePlotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlotServiceServer will
// result in compilation errors.
type UnsafePlotServiceServer interface {
	mustEmbedUnimplementedPlotServiceServer()
}

func RegisterPlotServiceServer(s grpc.ServiceRegistrar, srv PlotServiceServer) {
	s.RegisterService(&PlotService_ServiceDesc, srv)
}

func _PlotService_Plot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlotServiceServer).Plot(&plotServicePlotServer{stream})
}

type PlotService_PlotServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type plotServicePlotServer struct {
	grpc.ServerStream
}

func (x *plotServicePlotServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *plotServicePlotServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlotService_ServiceDesc is the grpc.ServiceDesc for PlotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PlotService",
	HandlerType: (*PlotServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Plot",
			Handler:       _PlotService_Plot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/rpcserver.proto",
}
