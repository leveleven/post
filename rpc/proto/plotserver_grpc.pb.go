// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: rpc/plotserver.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	// codes "google.golang.org/grpc/codes"
	// status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlotService_Plot_FullMethodName = "/rpc.PlotService/Plot"
)

// PlotServiceClient is the client API for PlotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlotServiceClient interface {
	Plot(ctx context.Context, opts ...grpc.CallOption) (PlotService_PlotClient, error)
}

type plotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlotServiceClient(cc grpc.ClientConnInterface) PlotServiceClient {
	return &plotServiceClient{cc}
}

func (c *plotServiceClient) Plot(ctx context.Context, opts ...grpc.CallOption) (PlotService_PlotClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlotService_ServiceDesc.Streams[0], PlotService_Plot_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &plotServicePlotClient{stream}
	return x, nil
}

type PlotService_PlotClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type plotServicePlotClient struct {
	grpc.ClientStream
}

func (x *plotServicePlotClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *plotServicePlotClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlotServiceServer is the server API for PlotService service.
// All implementations must embed UnimplementedPlotServiceServer
// for forward compatibility
type PlotServiceServer interface {
	Plot(PlotService_PlotServer) error
	// mustEmbedUnimplementedPlotServiceServer()
}

// // UnimplementedPlotServiceServer must be embedded to have forward compatible implementations.
// type UnimplementedPlotServiceServer struct {
// }

// func (UnimplementedPlotServiceServer) Plot(PlotService_PlotServer) error {
// 	return status.Errorf(codes.Unimplemented, "method Plot not implemented")
// }
// func (UnimplementedPlotServiceServer) mustEmbedUnimplementedPlotServiceServer() {}

// // UnsafePlotServiceServer may be embedded to opt out of forward compatibility for this service.
// // Use of this interface is not recommended, as added methods to PlotServiceServer will
// // result in compilation errors.
// type UnsafePlotServiceServer interface {
// 	mustEmbedUnimplementedPlotServiceServer()
// }

func RegisterPlotServiceServer(s grpc.ServiceRegistrar, srv PlotServiceServer) {
	s.RegisterService(&PlotService_ServiceDesc, srv)
}

func _PlotService_Plot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlotServiceServer).Plot(&plotServicePlotServer{stream})
}

type PlotService_PlotServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type plotServicePlotServer struct {
	grpc.ServerStream
}

func (x *plotServicePlotServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *plotServicePlotServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlotService_ServiceDesc is the grpc.ServiceDesc for PlotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PlotService",
	HandlerType: (*PlotServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Plot",
			Handler:       _PlotService_Plot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/plotserver.proto",
}
